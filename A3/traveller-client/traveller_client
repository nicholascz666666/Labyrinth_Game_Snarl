#!/usr/bin/env python3
# coding: utf-8

import sys
import a2
import traveller as server


#read from command line and deal with command and param seperately.
#if the input is not valid, do nothing
def main():
    user_input = sys.stdin.read()

    parsed_json_list = a2.decode_json(user_input)

    if len(parsed_json_list) > 0:
        first_json = parsed_json_list[0]
        if type(first_json) == dict:
            command =  first_json.get("command")
            if command == "roads":
                params = first_json.get("params")
                road_command(params)
            else:
                print("first command must be roads")
                return

        other_json = parsed_json_list[1:]
        for parsed_json in other_json:
            if type(parsed_json) == dict:
                command =  parsed_json.get("command")
                params = parsed_json.get("params")
                if command == "place":
                    place_command(params)
                elif command == "passage-safe?":
                    passagesafe_command(params)

#Creating a road network of towns
#and check the input is valid or not
def road_command(params):
    #check whether params is a valid list
    if type(params) != list:
        return
    
    #a dictionary of Town
    #key is a town object, value is a list of town objects that are connected to the key town
    network = {}
    
    for param in params:
        if type(param) == dict:
            from_town_str = param.get("from")
            to_town_str = param.get("to")

            if from_town_str and to_town_str and type(from_town_str) == str and type(to_town_str) == str:
                from_town = server.town(from_town_str)
                to_town = server.town(to_town_str)
                
            if from_town not in network:
                network[from_town] = [to_town]
            else:
                network[from_town].append(to_town)

            if to_town not in network:
                network[to_town] = [from_town]
            else:
                network[to_town].append(from_town)
    print("Creating a road network of towns..")
    server.createNetWork(network)


#Placing a character in a town
#and check the input is valid or not
def place_command(params):
    if type(params) == dict:
        char = params.get("character")
        town = params.get("town")
        if char and town and type(char) == str and type(town) == str:
            print("Placing a character in a town..")
            server.setCharacter(char, town)

#Query if a character can move to another town
#and check the input is valid or not
def passagesafe_command(params):
    if type(params) == dict:
        char = params.get("character")
        town = params.get("town")
        if char and town and type(char) == str and type(town) == str:
            result = server.arrive(town,char)
            if result:
                print("passage safe")
            else:
                print("passage unsafe")

#reads JSON values from STDIN and prints answers to STDOUT
if __name__ == "__main__":
    main()

