#!/usr/bin/env python3
# coding: utf-8

import json
from json import JSONDecodeError
import sys
sys.path.insert(0, "../../src/")
import level
import character
import gamestate

def create_level(room_data):
    origin = room_data.get("origin")
    bounds = room_data.get("bounds")
    layout = room_data.get("layout")

    room = {}
    room["position"] = (origin[1], origin[0])
    room["size"] = (bounds["columns"], bounds["rows"])
    room["walls"] = [(col, row) for row in range(bounds["rows"]) for col in range(bounds["columns"]) if layout[row][col] == 0]
    room["doors"] = [(col, row) for row in range(bounds["rows"]) for col in range(bounds["columns"]) if layout[row][col] == 2]
    room["objects"] = {}

    l = {"rooms" : [room], "hallways" : []}
    return level.Level(l)


def test_room(json_input):
    room_data = json_input[0]
    point_data = json_input[1]

    level_object = create_level(room_data)

    adversary_object = character.Adversary((point_data[1], point_data[0]))

    try:
        game_state = gamestate.GameState(level_object, [], [adversary_object])
    except Exception:
        result = [ "Failure: Point ", point_data , " is not in room at ", [0, 1]]
        return json.dumps(result)

    valid_moves = game_state.valid_moves()
    valid_moves_flip = [(move[1], move[0]) for move in valid_moves]
    result = ["Success: Traversable points from ", point_data, " in room at ", room_data.get("origin"), " are ", valid_moves_flip]

    return json.dumps(result)


if __name__ == "__main__":
    json_input = sys.stdin.read()
    try:
        json_input = json.loads(json_input)
    except JSONDecodeError:
        sys.exit()
    
    print(test_room(json_input))